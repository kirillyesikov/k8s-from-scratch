---
- name: Kubernetes from scratch installation
  hosts: all
  become: true
  vars:
    containerd_version: "2.0.0"
    runc_version: "1.2.1"
    cni_version: "v1.6.0"
    kube_version: "1.31"

  tasks:
    - name: Install dependencies
      apt:
        name:
          - net-tools
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
        update_cache: true

    - name: Disable swap
      command: swapoff -a

    - name: Download containerd
      get_url:
        url: "https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
        dest: "/usr/local/containerd.tar.gz"

    - name: Extract containerd
      unarchive:
        src: "/usr/local/containerd.tar.gz"
        dest: "/usr/local"
        remote_src: yes

    - name: Create containerd systemd service directory
      file:
        path: /usr/local/lib/systemd/system
        state: directory
        recurse: yes

    - name: Download containerd systemd service
      get_url:
        url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
        dest: /usr/local/lib/systemd/system/containerd.service

    - name: Reload systemd and start containerd
      systemd:
        name: containerd
        daemon_reload: yes
        enabled: yes
        state: started

    - name: Download runc
      get_url:
        url: "https://github.com/opencontainers/runc/releases/download/v{{ runc_version }}/runc.amd64"
        dest: "/usr/local/sbin/runc"
        mode: '0755'

    - name: Create CNI directory
      file:
        path: /opt/cni/bin
        state: directory

    - name: Download and extract CNI plugins
      unarchive:
        src: "https://github.com/containernetworking/plugins/releases/download/{{ cni_version }}/cni-plugins-linux-amd64-{{ cni_version }}.tgz"
        dest: /opt/cni/bin
        remote_src: yes

    - name: Add Kubernetes apt repo key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ kube_version }}/deb/Release.key | \
        gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes apt repo
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kube_version }}/deb/ /

    - name: Install kubelet, kubeadm, kubectl
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        update_cache: yes
        state: present

    - name: Hold Kubernetes packages
      shell: apt-mark hold kubelet kubeadm kubectl

    - name: Enable kubelet
      systemd:
        name: kubelet
        enabled: yes
        state: started

    - name: Configure IP forwarding
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.ipv4.ip_forward = 1

    - name: Apply sysctl settings
      command: sysctl --system

    - name: Generate default containerd config
      shell: "containerd config default > /etc/containerd/config.toml"
      args:
        creates: /etc/containerd/config.toml

    - name: Patch containerd config for SystemdCgroup
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Restart containerd after config change
      systemd:
        name: containerd
        daemon_reload: yes
        state: restarted

    - name: Initialize Kubernetes control plane
      command: kubeadm init --apiserver-advertise-address={{ ansible_host }}
      register: kubeadm_init
      changed_when: "'initialized' in kubeadm_init.stdout"

    - name: Set KUBECONFIG for root
      lineinfile:
        path: /root/.bashrc
        line: 'export KUBECONFIG=/etc/kubernetes/admin.conf'
        insertafter: EOF

    - name: Download Calico manifest
      get_url:
        url: https://raw.githubusercontent.com/projectcalico/calico/v3.29.0/manifests/calico.yaml
        dest: /root/calico.yaml

    - name: Apply Calico networking
      command: kubectl apply -f /root/calico.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
